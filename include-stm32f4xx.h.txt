#include "stm32f4xx.h"
#include "stdio.h"

// Déclaration des variables globales
char buffer[50];            // Buffer pour afficher les valeurs ADC
int ADC_value[3];           // Tableau pour stocker les valeurs ADC des trois canaux
int exti_interrupt_count, adc_conversion_count;   // Variables d'index pour les interruptions et les conversions ADC

/**
 * @brief Configurer l'horloge système pour utiliser le HSE (High Speed External) comme source.
 * Cette fonction active le HSE et configure l'horloge système.
 */
void system_clock_config()
{
    RCC->CR |= 0x00010000;                                // Activer le HSE
    while (!(RCC->CR & (1 << 17)));                       // Attendre que le HSE soit prêt
    RCC->CFGR |= 0x00000001;                              // Choisir la source de l'horloge système (SW1=0, SW0=1 pour HSE)
    while ((RCC->CFGR & 0x0000000f) != 0x00000005);       // Vérifier que l'horloge système utilise bien le HSE
}

/**
 * @brief Configurer l'interruption externe EXTI0 pour le bouton connecté à PA0.
 * Cette fonction configure le GPIO et l'EXTI pour générer une interruption à la montée du signal.
 */
void config_EXTI0()
{
    RCC->APB2ENR |= 1 << 14;                             // Activer l'horloge pour SYSCFG
    SYSCFG->EXTICR[0] |= 0x0000;                         // Mux 0 pour relier PA0 à l'EXTI0
    EXTI->RTSR |= 0x00000001;                            // Détecter les bords montant
    EXTI->IMR |= 0x00000001;                             // Autoriser l'interruption externe sur EXTI0
    while ((EXTI->PR & (1 << 0)) != 0);                   // Attendre que l'interruption soit prête
    NVIC_EnableIRQ(EXTI0_IRQn);                          // Activer l'interruption EXTI0 dans le NVIC
}

/**
 * @brief Configurer l'ADC1 pour effectuer des conversions analogiques sur 3 canaux.
 * Cette fonction initialise l'ADC pour utiliser les canaux 1, 4 et 5 avec une résolution de 12 bits.
 */
void config_ADC1()
{
    // Configurer les broches GPIO pour l'ADC (canaux 1, 4, 5)
    RCC->AHB1ENR |= 1 << 0;                              // Activer l'horloge du port A
    GPIOA->MODER |= 0x0000000C;                          // Configurer PA1 en mode analogique
    GPIOA->MODER |= 0x00000300;                          // Configurer PA4 en mode analogique
    GPIOA->MODER |= 0x00000C00;                          // Configurer PA5 en mode analogique

    // Configurer le Timer2 pour générer un signal de déclenchement pour l'ADC
    RCC->APB1ENR |= 0x00000001;                          // Activer l'horloge du Timer2
    TIM2->PSC = 7999;                                    // Prédiviseur pour générer une fréquence de 1 Hz
    TIM2->ARR = 999;                                     // Période du timer
    while ((TIM2->SR & 0x00000001) != 0);                 // Attendre la fin de la configuration

    // Configurer l'ADC pour utiliser Timer2 comme déclencheur
    RCC->APB2ENR |= 1 << 8;                              // Activer l'horloge de l'ADC1
    ADC1->CR2 |= 0x06000000;                             // Utiliser Timer2 comme source de déclenchement
    ADC1->CR2 |= 0x10000000;                             // Déclenchement sur le front montant
    ADC1->CR2 |= 0x00000001;                             // Activer l'ADC
    ADC1->CR1 |= 0x00000800;                             // Mode discontinu pour les canaux réguliers
    ADC1->CR2 &= ~(0x00000002);                          // Mode de conversion unique
    ADC1->CR1 |= 0x00000100;                             // Activer le mode de balayage
    ADC1->CR1 |= 0x00004000;                             // Nombre de canaux dans le mode discontinu (3 canaux)
    ADC1->CR1 &= ~(0x03000000);                          // Résolution de 12 bits
    ADC1->SMPR2 &= ~(0x0003f038);                        // Temps d'échantillonnage pour les canaux 1, 4 et 5 (3 cycles)
    ADC1->SQR3 |= 0x402;                                 // Sélectionner les canaux de conversion (CH2 -> CH0 -> CH1)
    ADC1->SQR1 |= 0x2 << 20;                             // Nombre de conversions (3 conversions)
    ADC1->CR1 |= 1 << 5;                                 // Autoriser l'interruption après chaque conversion
    while ((ADC1->SR & (1 << 1)) != 0);                  // Attendre la fin de la configuration
    NVIC_EnableIRQ(ADC_IRQn);                            // Activer l'interruption ADC dans le NVIC
}

/**
 * @brief Configurer le Timer3 pour générer des signaux PWM sur 3 canaux.
 * Cette fonction configure le Timer3 pour produire des signaux PWM sur les broches PA6, PA7 et PB0.
 */
void config_TIMER3()
{
    // Configurer les broches GPIO pour les signaux PWM (PA6, PA7, PB0)
    RCC->AHB1ENR |= 1 << 0;                              // Activer l'horloge du port A
    RCC->AHB1ENR |= 1 << 1;                              // Activer l'horloge du port B
    GPIOA->MODER |= 0x0000A000;                          // Configurer PA6 et PA7 en mode fonction alternative
    GPIOA->AFR[0] |= 0x22000000;                         // Configurer PA6 et PA7 pour la fonction alternative AF2 (Timer3)
    GPIOB->MODER |= 0x00000002;                          // Configurer PB0 en mode fonction alternative
    GPIOB->AFR[0] |= 0x00000002;                         // Configurer PB0 pour la fonction alternative AF2 (Timer3)
    GPIOA->OTYPER = 0x0000;                              // Configurer PA6 et PA7 en sortie push-pull
    GPIOB->OTYPER = 0x0000;                              // Configurer PB0 en sortie push-pull

    // Configurer Timer3 pour générer des signaux PWM
    RCC->APB1ENR |= (1 << 1);                            // Activer l'horloge du Timer3
    TIM3->CR1 |= 0x0001;                                  // Activer le compteur
    TIM3->PSC = 7999;                                    // Prédiviseur pour générer une fréquence de 1 Hz
    TIM3->ARR = 999;                                     // Période du timer
    TIM3->CNT = 0;                                       // Réinitialiser le compteur
    TIM3->CCER |= 0x0111;                                // Activer la sortie des canaux 1, 2 et 3
    TIM3->CCMR1 |= 0x6060;                               // Configurer les canaux 1 et 2 pour la sortie PWM
    TIM3->CCMR2 |= 0x0060;                               // Configurer le canal 3 pour la sortie PWM
    TIM3->CCR1 = 0;                                      // Initialiser les rapports cycliques (duty cycle) à 0
    TIM3->CCR2 = 0;                                      // Initialiser les rapports cycliques à 0
    TIM3->CCR3 = 0;                                      // Initialiser les rapports cycliques à 0
}

/**
 * @brief Configurer la communication USART2 pour la transmission de données série.
 * Cette fonction configure les broches TX (PA2) et RX (PA3) et initialise USART2 pour transmettre des données.
 */
void config_USART2()
{
    // Configurer les broches GPIO pour USART2
    RCC->AHB1ENR |= 1 << 0;                              // Activer l'horloge du port A
    GPIOA->MODER |= 0x00000020;                           // Configurer PA2 (TX) en mode fonction alternative
    GPIOA->AFR[0] |= 0x0700;                             // Configurer PA2 pour USART2 (AF7)
    GPIOA->MODER |= 0x00000040;                           // Configurer PA3 (RX) en mode fonction alternative
    GPIOA->AFR[0] |= 0x7000;                             // Configurer PA3 pour USART2 (AF7)

    // Configurer USART2
    RCC->APB1ENR |= (1 << 17);                           // Activer l'horloge pour USART2
    USART2->BRR = 833.33;                                // Baud rate à 115200 (si la fréquence d'horloge est correcte)
    USART2->CR1 |= 0x00002008;                           // Activer la transmission (TE=1) et l'USART (UE=1)
}

/**
 * @brief Envoyer un caractère via USART2.
 * Cette fonction envoie un caractère via la ligne TX de l'USART2.
 * 
 * @param ch Le caractère à envoyer.
 */
void send_1char(char ch)
{
    while (!(USART2->SR == 0xC0));                       // Attendre que le registre de données soit prêt
    USART2->DR = ch;                                     // Envoyer le caractère
}

/**
 * @brief Envoyer une chaîne de caractères via USART2.
 * Cette fonction envoie chaque caractère d'une chaîne via la ligne TX de l'USART2.
 * 
 * @param pt La chaîne à envoyer.
 */
void send_string(char *pt)
{
    while (*pt != '\0')                                  // Tant qu'on n'atteint pas la fin de la chaîne
    {
        send_1char(*pt);                                 // Envoyer le caractère courant
        pt++;                                             // Passer au caractère suivant
    }
}

/**
 * @brief Fonction principale.
 * Cette fonction configure l'horloge système, l'interruption externe, l'USART2, le Timer3 et l'ADC, puis entre dans une boucle infinie.
 */
int main(void)
{
    system_clock_config();    // Configurer l'horloge système
    config_EXTI0();           // Configurer l'interruption externe EXTI0
    config_USART2();          // Configurer l'USART2
    config_TIMER3();          // Configurer le Timer3 pour PWM
    config_ADC1();            // Configurer l'ADC1

    while (1);                // Boucle infinie pour que le programme continue à tourner
}

/**
 * @brief Gestionnaire d'interruption EXTI0.
 * Cette fonction est appelée lors de l'interruption sur PA0. Elle alterne l'activation/désactivation du Timer2.
 */
void EXTI0_IRQHandler()
{
    exti_interrupt_count++;  // Incrémenter le compteur des interruptions EXTI0
    if (exti_interrupt_count == 1)
    {
        TIM2->CR1 |= 0x0001;  // Activer le Timer2
    }
    if (exti_interrupt_count == 2)
    {
        exti_interrupt_count = 0;
        TIM2->CR1 &= ~(0x0001);  // Désactiver le Timer2
    }
}

/**
 * @brief Gestionnaire d'interruption ADC.
 * Cette fonction est appelée lorsqu'une conversion ADC est terminée. Elle lit les valeurs des canaux et les utilise pour ajuster les rapports cycliques de PWM.
 */
void ADC_IRQHandler()
{
    adc_conversion_count++;  // Incrémenter le compteur des conversions ADC
    if (adc_conversion_count == 1)
    {
        ADC_value[1] = ADC1->DR;  // Lire la valeur du canal 1
    }
    if (adc_conversion_count == 2)
    {
        ADC_value[2] = ADC1->DR;  // Lire la valeur du canal 2
    }
    if (adc_conversion_count == 3)
    {
        adc_conversion_count = 0;
        ADC_value[3] = ADC1->DR;  // Lire la valeur du canal 3
        // Ajuster les rapports cycliques pour les trois canaux PWM en fonction des valeurs ADC
        TIM3->CCR1 = (999 / 4095) * ADC_value[1];
        TIM3->CCR2 = (999 / 4095) * ADC_value[2];
        TIM3->CCR3 = (999 / 4095) * ADC_value[3];
        // Envoyer les valeurs ADC via USART2
        sprintf(buffer, "CH1=%d, CH2=%d, CH3=%d", ADC_value[1], ADC_value[2], ADC_value[3]);
        send_string(buffer);
    }
}
